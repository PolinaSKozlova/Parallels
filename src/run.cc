#include <iostream>

#include "gauss/gauss.h"
#include "winograd/winograd.h"
#include "matrix/matrix.h"


int main() {
Parallels::Matrix matrix(12,13);
  // std::vector<double> a = {2.0, 1.0, -1.0, -3.0, -1.0, 2.0, -2.0, 1.0, 2.0};
  // std::vector<double> a = {2.5,  1.5, -1.5, 8.5,  -3.5, -1.5, 2.5, -11.5,
  //                          -2.5, 1.5, 2.5,  -3.5, 1.5,  2.5,  3.5, 4.5};
//   std::vector<double> null_val {0, 0 ,12, -18, 5, 
//                             -2, 0, 3, 5, 0, 
//                            0, 2, 0, 0, 1, 
//                            -4, 8, 12, -6, 13};
// std::vector<double> zero{2.0, 1.0, -1.0, 5.0, 0.0, 0.0, 0.0, -2.0, 1.0, 2.0, 3.0, 4.0};;
std::vector<double> big {1,	1,	1,	1,	1,	1,	1,	 1,	1,	1,	1,	1,	10,
0,	5,	0,	1,	0,	1,	1,	 0,	0,	0,	0,	0,	12,
0,	0,	6,	0,	1,	1,	0,	 0,	0,	0,	1,	0,	12,
0,	0,	0,	3,	0,	1,	1,	 1,	0,	0,	1,	0,	13,
0,	0,	0,	0,	3,	2,	2,	 0,	1,	0,	1,	0,	13,
0,	0,	0,	0,	1,	4,	0,	 1,	1,	0,	1,	0,	14,
0,	0,	0,	0,	1,	0,	4,	 1,	0,	0,	1,	0,	15,
0,	0,	0,	0,	0,	0,	0,	 1,	2,	3,	1,	0,	16,
0,	0,	0,	0,	0,	0,	0,	 0,	2,	1,	4,	0,	17,
0,	0,	0,	0,	0,	0,	0,	 0,	2,	2,	0,	0,	18,
0,	0,	0,	0,	0,	1,	1,	11,	1,	1,	1,	0,	19,
0,	0,	2,	2,	2,	2,	2,	 2,	2,	2,	2,	2,	21};
// Parallels::Matrix matrix2(3,4);
// std::vector<double> d = { 2.5,	 1.5,	-1.5	,    9,
// -3.5,	-1.5,	 2.5,	-11.5,
// -2.5,	 1.5	, 2.5	, -3.5};
  matrix.FillMatrix(big);
  matrix.PrintMatrix();
  // matrix2.FillMatrix(d);
  // matrix2.PrintMatrix();

  std::cout << "==================================" << std::endl;
  // std::vector<double> b = {-11, -3, -1, 5};
  // matrix.MakeExtendedMatrix(b);
  Parallels::Gauss gauss;

try{
std::vector<double> solution = gauss.RunParallelGauss(matrix);
// std::vector<double> solution = gauss.RunUsualGauss(matrix);

// std::vector<double> solution = gauss.RunUsualGauss(matrix2);
  matrix.PrintMatrix(gauss.GetGaussMatrix());
  std::cout << "==================================" << std::endl;

  for(size_t i = 0; i < solution.size(); ++i) {
    std::cout << solution[i] << " ";
  }
  std::cout << std::endl;

}catch(std::exception& e){
  std::cout << e.what() << std::endl;
}

  // solution = gauss.RunUsualGauss(matrix2);
  //   std::cout << "==================================" << std::endl;

  // for(size_t i = 0; i < solution.size(); ++i) {
  //   std::cout << solution[i] << " ";
  // }
  // std::cout << std::endl;

// подмена строк
//   0 0 12 -18 5 -9
// -2 4 3 5 0 -7
// -1 2 3 0 1 -4
// -4 8 12 -6 13 -1


//большая матрица
// 1 1 1 1 1 1 1 1 1 1 1 1 10 
// 0 5 0 1 0 1 1 0 0 0 0 0 12 
// 0 0 6 0 1 1 0 0 0 0 1 0 12 
// 0 0 0 3 0 1 1 1 0 0 1 0 13 
// 0 0 0 0 3 2 2 0 1 0 1 0 13 
// 0 0 0 0 1 4 0 1 1 0 1 0 14 
// 0 0 0 0 1 0 4 1 0 0 1 0 15 
// 0 0 0 0 0 0 0 1 2 3 1 0 16 
// 0 0 0 0 0 0 0 0 2 1 4 0 17 
// 0 0 0 0 0 0 0 0 2 2 0 0 18 
// 0 0 0 0 0 1 1 11 1 1 1 0 19 
// 0 0 2 2 2 2 2 2 2 2 2 2 21 


//20*21
// 1	1	1	1	1	 1	 1	 1	 1	  1	  1	 1	 10	 18	 23	  2	  1	 8	 5	  7	  4
// 0	5	0	1	0	 1	 1	 0	 0	  0	  0	 0	 12	 34	  2	 -6	  3	 2	 7	 12	  5
// 0	0	6	0	1	 1	 0	 0	 0	  0	  1	 0	 12	 15	 12	 -3	 34	 1	-1	 13	  6
// 0	0	0	3	0	 1	 1	 1	 0	  0	  1	 0	 13	  2	 -2	 12	 64	14	 2	-17	  1
// 0	0	0	0	3	 2	 2	 0	 1	  0	  1	 0	 13	  4	 -3	 -6	 25	15	 1	  7	 98
// 0	0	0	0	1	 4	 0	 1	 1	  0	  1	 0	 14	 -5	 76	 54	-96	 8	 3	 -9	 34
// 0	0	0	0	1	 0	 4	 1	 0	  0	  1	 0	 15	  7	 67	 25	  6	-9	 2	  2	  3
// 0	0	0	0	0	 0	 0	 1	 2	  3	  1	 0	 16	-11	 -3	-22	 -7	-5	34	  3	-67
// 0	0	0	0	0	 0	 0	 0	 2	  1	  4	 0	 17	  2	 54	  4	  2	23	 9	 47	  5
// 0	0	0	0	0	 0	 0	 0	 2	  2	  0	 0	 18	 -3	 -5	  3	  3	76	 8	 56	 -4
// 0	0	0	0	0	 1	 1	11	 1	  1	  1	 0	 19	  1	-14	 -6	  5	56	 7	  3	 78
// 0	0	2	2	2	 2	 2	 2	 2	  2	  2	 2	 21	  6	 90	  5	 -4	43	-7	-11	  5
// 0	0	0	0	7	-6	96	17	 1	 -3	  3	-2	  8	 -5	 20	  6	-17	65	 2	 -2	 -6
// 0	0	0	0	0	 0	 7	 6	-5	  5	  9	12	 -3	 37	 34	-97	 15	-8	 3	  3	 59
// 0	0	0	0	0	 0	 8	-9	 5	 14	 11	-4	 -9	 12	 13	  9	  7	-9	 6	 45	 69
// 0	0	0	0	0	 0	 0	 8	 6	-97	 34	 4	  2	 -1	 19	 32	  9	 7	-5	  7	-34
// 0	0	0	0	0	 0	 0	 4	 5	 -9	-65	 9	  8	  6	 -7	  8	 11	23	 8	  8	  3
// 0	0	0	0	0	 0	 0	 0	 4	 -6	 87	45	 23	 21	 93	 12	  2	-5	 9	 -9	  4
// 0	0	0	0	0	 0	 0	 0	 0	 -7	  8	 5	-47	 87	 32	  3	 -6	 5	 3	  9	 -1
// 0	0	0	0	0	 0	 0	 0	 0	  0	 23	 4	 12	 -3	  8	 -7	 45	14	63	 67	  2

// 25*26
// 1	1	1	1	1	 1	 1	 1	 1	  1	  1	  1	 10	 18	 23	  2	  1	 8	  5	  7	  4	  9	  6	  7	 -8	  1
// 0	5	0	1	0	 1	 1	 0	 0	  0	  0	  0	 12	 34	  2	 -6	  3	 2	  7	 12	  5	  8	  7	 -9	 93	  1
// 0	0	6	0	1	 1	 0	 0	 0	  0	  1	  0	 12	 15	 12	 -3	 34	 1	 -1	 13	  6	  7	 -6	 87	  1	  5
// 0	0	0	3	0	 1	 1	 1	 0	  0	  1	  0	 13	  2	 -2	 12	 64	14	  2	-17	  1	 -5	  2	 65	  4	  2
// 0	0	0	0	3	 2	 2	 0	 1	  0	  1	  0	 13	  4	 -3	 -6	 25	15	  1	  7	 98	  3	 21	 43	-45	  7
// 0	0	0	0	1	 4	 0	 1	 1	  0	  1	  0	 14	 -5	 76	 54	-96	 8	  3	 -9	 34	  2	  1	 56	 -2	 -9
// 0	0	0	0	1	 0	 4	 1	 0	  0	  1	  0	 15	  7	 67	 25	  6	-9	  2	  2	  3	 11	 12	 79	 -1	  5
// 0	0	0	0	0	 0	 0	 1	 2	  3	  1	  0	 16	-11	 -3	-22	 -7	-5	 34	  3	-67	  7	 32	  5	  1	  4
// 0	0	0	0	0	 0	 0	 0	 2	  1	  4	  0	 17	  2	 54	  4	  2	23	  9	 47	  5	  6	 45	  2	  2	-53
// 0	0	0	0	0	 0	 0	 0	 2	  2	  0	  0	 18	 -3	 -5	  3	  3	76	  8	 56	 -4	 -5	 75	  3	  3	  2
// 0	0	0	0	0	 1	 1	11	 1	  1	  1	  0	 19	  1	-14	 -6	  5	56	  7	  3	 78	  4	 38	 -9	  4	113
// 0	0	2	2	2	 2	 2	 2	 2	  2	  2	  2	 21	  6	 90	  5	 -4	43	 -7	-11	  5	  3	 45	  7	  1	-98
// 0	0	0	0	7	-6	96	17	 1	 -3	  3	 -2	  8	 -5	 20	  6	-17	65	  2	 -2	 -6	-93	  5	 -8	  2	 65
// 0	0	0	0	0	 0	 7	 6	-5	  5	  9	 12	 -3	 37	 34	-97	 15	-8	  3	  3	 59	 56	 34	  6	  5	 -7
// 0	0	0	0	0	 0	 8	-9	 5	 14	 11	 -4	 -9	 12	 13	  9	  7	-9	  6	 45	 69	 67	-14	  9	 -6	  3
// 0	0	0	0	0	 0	 0	 8	 6	-97	 34	  4	  2	 -1	 19	 32	  9	 7	 -5	  7	-34	-18	  3	-65	  5	-45
// 0	0	0	0	0	 0	 0	 4	 5	 -9	-65	  9	  8	  6	 -7	  8	 11	23	  8	  8	  3	  8	  5	  3	 -7	  3
// 0	0	0	0	0	 0	 0	 0	 4	 -6	 87	 45	 23	 21	 93	 12	  2	-5	  9	 -9	  4	 -9	  4	 13	  6	  8
// 0	0	0	0	0	 0	 0	 0	 0	 -7	  8	  5	-47	 87	 32	  3	 -6	 5	  3	  9	 -1	 87	-56	 23	 -9	 -9
// 0	0	0	0	0	 0	 0	 0	 0	  0	 23	  4	 12	 -3	  8	 -7	 45	14	 63	 67	  2	  5	 -9	  2	  3	  3
// 0	0	0	0	0	 0	 0	 0	 0	  0	  0	 78	 67	 54	 87	 32	 45	67	 65	  9	  1	  4	 45	  2	  6	 65
// 0	0	0	0	0	 0	 0	 0	 0	  0	  0	 98	  1	  2	  5	  6	 -9	-6	 -1	  7	  4	  3	100	 -1	  4	 -9
// 0	0	0	0	0	 0	 0	 0	 0	  0	  0	-12	  3	  4	  5	 67	 23	 3	 -8	  4	  6	 89	  8	  5	 -2	  8
// 0	0	0	0	0	 0	 0	 0	 0	  0	  0	  0	 78	  6	 -9	  5	  4	-7	 26	  3	  2	 17	 23	 -6	 -9	 -7
// 0	0	0	0	0	 0	 0	 0	 0	  0	  0	  0	  0	  8	  7	 -9	  7	 5	-47	 34	-11	  2	  3	 -8	 -3	  5

  return 0;
}

